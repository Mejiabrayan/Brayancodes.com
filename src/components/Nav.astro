<nav
  aria-label='Main Navigation'
  class='mb-16 flex w-full items-center justify-between py-6 text-base sm:text-lg'
>
  <div class='flex items-center gap-4'>
    <a
      href='/'
      class='nav-link transition-colors duration-200 hover:text-white hover:bg-transparent'
      transition:name="home"
      transition:animate="slide"
    >
      Home
    </a>
    <a
      href='/work'
      class='nav-link transition-colors duration-200 hover:text-white hover:bg-transparent'
      transition:name="work"
      transition:animate="slide"
    >
      Work
    </a>
    <a
      href='/blogs'
      class='nav-link transition-colors duration-200 hover:text-white hover:bg-transparent'
      transition:name="blog"
      transition:animate="slide"
    >
      Blogs
    </a>
  </div>

  <a
    href='mailto:mejiabrayan@protonmail.com'
    class='nav-link px-4 py-2 border border-neutral-800 rounded-lg hover:bg-neutral-800/30 transition-all duration-300'
  >
    Contact Me
  </a>
</nav>

<script>
  class SoundManager {
    private static instance: SoundManager;
    private audio: HTMLAudioElement;
    private isPlaying: boolean = false;
    private audioPromise: Promise<void> | null = null;

    private constructor() {
      // Preload audio and set properties
      this.audio = new Audio('/btn-sound.mp3');
      this.audio.volume = 0.3;
      this.audio.preload = 'auto';
      
      // Add ended event listener to reset state
      this.audio.addEventListener('ended', () => {
        this.isPlaying = false;
        this.audioPromise = null;
      });
    }

    public static getInstance(): SoundManager {
      if (!SoundManager.instance) {
        SoundManager.instance = new SoundManager();
      }
      return SoundManager.instance;
    }

    public async playSound(): Promise<void> {
      // Don't play if already playing or audio is loading
      if (this.isPlaying || this.audioPromise) return;

      try {
        this.isPlaying = true;
        this.audio.currentTime = 0;
        this.audioPromise = this.audio.play();
        await this.audioPromise;
      } catch (error) {
        console.warn('Audio playback failed:', error);
      } finally {
        this.isPlaying = false;
        this.audioPromise = null;
      }
    }
  }

  // Initialize sound manager
  const soundManager = SoundManager.getInstance();

  // Use event delegation for better performance
  document.addEventListener('click', (event) => {
    const target = event.target as HTMLElement;
    if (target.closest('.nav-link')) {
      soundManager.playSound();
    }
  }, { passive: true });

  // Preload audio on page load
  window.addEventListener('load', () => {
    const audio = new Audio('/btn-sound.mp3');
    audio.preload = 'auto';
  }, { once: true });
</script> 