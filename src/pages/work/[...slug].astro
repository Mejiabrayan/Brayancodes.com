---
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { Image } from 'astro:assets';
import { ViewTransitions } from 'astro:transitions';
import Container from '../../components/container.astro';

export async function getStaticPaths() {
  const projectPosts = await getCollection('projects');
  return projectPosts.map((project: CollectionEntry<'projects'>) => ({
    params: { slug: project.slug },
    props: { project },
  }));
}

interface Props {
  project: CollectionEntry<'projects'>;
}

const { project } = Astro.props;
const { Content } = await project.render();
const { title, overview, cover, link } = project.data;
---

<Layout title={`${title} | Project`}>
  <ViewTransitions />
  <Container>
    <article class='max-w-3xl mx-auto'>
      <!-- Header -->
      <header class='text-center space-y-4 mb-12'>
        <h1 class='text-4xl font-[Tobias] italic text-neutral-300'>{title}</h1>
        <p class='text-lg text-neutral-300/90'>{overview}</p>
        {
          link && (
            <a
              href={link}
              target='_blank'
              rel='noopener noreferrer'
              class='inline-block text-sm text-neutral-300 hover:text-white transition-colors duration-200'
            >
              View Project â†’
            </a>
          )
        }
      </header>

      <!-- Project Image with Reflection -->
      <div class='reflection-wrapper'>
        <!-- Original Image -->
        <div
          class='relative isolate aspect-video w-full rounded-lg overflow-hidden'
        >
          <Image
            src={cover}
            alt={title}
            width={1000}
            height={1000}
            class='w-full h-full object-cover'
            loading={'lazy'}
          />
        </div>

        <!-- Reflection -->
        <div
          class='relative isolate aspect-video w-full overflow-hidden reflection'
        >
          <Image
            src={cover}
            alt={`${title} reflection`}
            width={1000}
            height={1000}
            class='w-full h-[75%] object-cover'
            loading={'lazy'}
          />
        </div>
      </div>

      <!-- Content -->
      <div
        class='prose prose-neutral prose-invert max-w-none leading-normal mt-0
        prose-headings:font-[Tobias] prose-headings:italic
        prose-h1:text-neutral-300 prose-h1:text-2xl
        prose-h2:text-neutral-300 prose-h2:text-xl
        prose-h3:text-neutral-300 prose-h3:text-lg
        prose-p:text-neutral-300
        prose-a:text-white prose-a:no-underline hover:prose-a:text-neutral-200
        prose-strong:text-white
        prose-code:rounded-sm prose-code:border prose-code:border-white/10
        prose-code:bg-neutral-800/50 prose-code:px-1
        prose-ul:text-neutral-300'
      >
        <Content />
      </div>
    </article>
  </Container>
</Layout>

<style>
  .reflection-wrapper {
    position: relative;
    padding-bottom: 15px;
  }

  .reflection {
    transform: rotateX(180deg) translateY(20%);
    mask-image: linear-gradient(transparent 40%, white 90%);
    -webkit-mask-image: linear-gradient(transparent 40%, white 90%);
    opacity: 0.5;
    filter: blur(1.5px) brightness(1.5);
  }
</style>


<script define:vars={{ slug: post.slug }}>
  // Fetch view count on page load
  fetch(`/api/${slug}`)
    .then(res => res.json())
    .then(data => {
      if (data.views) {
        document.getElementById('viewCount').textContent = 
          `${data.views.toLocaleString()} views`;
      }
    })
    .catch(err => console.error('Failed to fetch views:', err));
</script>